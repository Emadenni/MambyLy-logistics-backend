service: MambyLy Logistics

provider:
  name: aws
  runtime: nodejs20.x
  region: ${env:AWS_REGION}
  stage: ${opt:stage, 'dev'}
  environment:
    BUCKET_NAME: ${env:S3_BUCKET_BASE}-${self:provider.stage}
    ADMIN_TABLE_NAME: ${env:ADMIN_TABLE_BASE}-${self:provider.stage}
    CLIENTS_MESSAGES_NAME: ${env:CLIENTS_MESSAGES_BASE}-${self:provider.stage} 
    JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}

  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:CreateFunction
        - lambda:UpdateFunctionCode
        - apiGateway:*
        - s3:*
        - dynamodb:*
      Resource: "*"

functions:
  test:
    handler: handlers/test/test.handler
    events:
      - httpApi:
          path: /test
          method: get
    package:
      include:
        - services/**
        - handlers/**
        - node_modules/**

  registerAdmin:
    handler: handlers/admins/registerAdmin/index.handler
    events:
      - httpApi:
          path: /admin/register
          method: post
    package:
      include:
        - services/**
        - handlers/**
        - node_modules/**

  loginAdmin:
    handler: handlers/admins/loginAdmin/index.handler
    events:
      - httpApi:
          path: /admin/login
          method: post
    package:
      include:
        - services/**
        - handlers/**
        - node_modules/**

  postClientMessage:
    handler: handlers/clientsMessages/postClientMessage/index.handler
    events:
      - httpApi:
          path: /clientsmessages
          method: post
    package:
      include:
        - services/**
        - handlers/**
        - node_modules/**

  deleteClientMessage:
    handler: handlers/clientsMessages/deleteClientMessage/index.handler
    events:
      - httpApi:
          path: /clientsMessages/{clientMessageId}
          method: delete
    package:
      include:
        - services/**
        - handlers/**
        - node_modules/**

  getClientMessage:
    handler: handlers/clientsMessages/getClientMessage/index.handler
    events:
      - httpApi:
          path: /clientsMessages/{clientMessageId}
          method: get
    package:
      include:
        - services/**
        - handlers/**
        - node_modules/**

  getAllClientsMessages:
    handler: handlers/clientsMessages/getAllClientsMessages/index.handler
    events:
      - httpApi:
          path: /clientsMessages
          method: get
    package:
      include:
        - services/**
        - handlers/**
        - node_modules/**

resources:
  Resources:
    AdminTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ADMIN_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: adminId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: adminId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ClientsMessagesTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CLIENTS_MESSAGES_NAME}
        AttributeDefinitions:
          - AttributeName: clientMessageId
            AttributeType: S
        KeySchema:
          - AttributeName: clientMessageId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: sentAt
          Enabled: true
